*constraints.txt*
==============================================================================
CONSTRAINTS                                                     *constraints-help*

*virtual_clocks*
 Virtual clocks are clocks which are not associated with a pin or port in a design. 
 They are used as references for timing analysis to specify input and output 
 delays. If your chip is system_clock but the input and output come from
 CLK1 and go to CLK2, then CLK1 / CLK2 can be made virtual for I/O timing. 
>
 create_clock -name VIRTUAL_CLK1 -period 10 -waveform {2 8}
 set_input_delay -clock VIRTUAL_CLK1 -max 2.7 [get_ports CORE_IN]
<
    NOTE: CORE_IN is the input port that is being timed to the virtual 
          clock on a different domain

*set_multicycle_path*
 Specified multicycle paths between timing paths. These are paths which
 require more than one clock period for execution. All paths are considered
 as one cycle paths for setup/hold unless specified. 
    
 Setting to 2 paths means that the hold timing is checked after 2 cycles, not 1.

 NOTE: Genus ignores -hold multicycles unless during a physical flow. Insertion
       delay often accounts for hold failures and is not accounted for in 
       front end tools.

 NOTE: Reset synchronization can be done with multi cycle paths by carefully
 constraining it with a state machine to hold reset for the right amount of
 time. You can multi cycle the synchronous reset, but must constrain the skew so
 that the arriving resets land all in the same clock cycle. 
>
 set_multicycle_path 2 -hold -from CLKA -to CLKb
<

*create_clock*
 Creates a clock object and defines its waveform. Not specifying a source 
 will cause the clock to be defined as virtual. 

# Creates a 10 MHz clock with a 50% duty cycle
>
 create_clock 
    -name CLKA 
    -period 10 
    -waveform "0 5"
<

*set_false_path*
 Identifies false paths in a design and breaks/disables specific instance timing
 arcs. An example would be disabling timing checks of BIST blocks you plan on
 running much slower than the mission mode clock or disabling timing to static 
 configuration static registers (CSRs). 

# Disables timing checks on the TCEN BIST signal for the block
>
 set_false_path -to [get_pins -hierarchical *instance*/TCEN]
<

*set_case_analysis* 
 Sets a constant or transitional value to a list of pins or ports for the timing
 engine. Can specify the mode of a design without changing the netlist.

 NOTE: False paths will disable timing for a path. Case analysis will propagate
       a specific value for timing. 

# Sets the input value of memory pin EMAS to 0 for the timing engine.
>
 set_case_analysis 0 [get_pins -hierarchical *SRAM*/*/EMAS]
<

*set_clock_uncertainty*
 Specified the uncertainty of a clock network, specifically a window in which
 the clock can rise or fall. Applying an uncertainty constraint can be
 representative of inter/intra clock skew, jitter, margins, etc.

 NOTE: Inter-Clock uncertainty is skew between 2 clocks
 NOTE: Intra-Clock uncertainty is skew defined for 1 clock

# Sets a intra-clock setup uncertainty which creates 0.4 units uncertainty on
  all paths ending at reg1 captured by clock CLK.
>
 set_clock_uncertainty -setup -rise_to 0.4 [get_db pins *reg1/CLK]
<

*set_clock_transition*
 Sets a specific slew value for a clocks rising or falling edge. 
>
 set_clock_transition -max -rise 0.5 CLKA
<

*set_max_transition*
*set_min_transition*
 Sets the max/min slew time limit (transition) on the specified instance, pin or
 port. The pins of cells in a timing library will have their own max constraint,
 and the most aggressive between your own and the timing library will be used. 

 NOTE: For analysis, transition time is the time it takes to go from high to low
 or low to high

# Creates a 0.9 unit slew on all ports of the design
>
 set_max_transition 0.9 [get_ports *]
<

*create_generated_clock*
 Creates a new clock signal which is source synchronous to the clock which it
 creates. For example, dividing a clock by 2 through a clock and setting this
 constraint creates a new clock with T = Tsource*2

# Creates a generated clock at the output of a flop div 2
>
 create_generated_clock -name newCLK -source CLK -divide_by 2 FD1/Q
<

*set_clock_groups*
 Defines clock groups with specific clock definitions. You can specifiy mutual
 exclusiveness, asynchronous groups, or logical exclusiveness. 
    - asynchronous: Defines clock groups to not have a phase relationship
    - logically_exclusive: Clock groups share no functional paths (clock mux clocks)
    - physically_exclusive: Cannot exist at the same time (multiple clocks on 1 pin)

# Creates 2 clocks which are logically exclusive and then specifies they are
  also async to the other clocks of the design. 

>
 set_clock_group -logically_exclusive \
    -group {CLK_DIV1} \
    -group {CLK_DIV2}

 set_clock_group -asynchronous \
    -group {CLK_DIV1} \
    -group {CLK_DIV2} \
    -group {CLKA}
<



*set_input_delay*

 Timing paths often extend from a clock pin to a source register. These paths
 will go through traces and comb logic which have delays. If the source or
 destination register are outside of the macro you are designing, then the timing
 paths with those registers are not defined. You use the output delay and input
 delay constraints to solve this issue.

 NOTE: max input/output delay is used for setup timing analysis
       min input/output delay is used for hold timing analysis

 `set_input_delay` defines the arrival time relative to a clock edge on input
 ports. It models the delay from an external register to an input port of the
 module. It is the range of delays of the data toggling after a clock.

 For example, specifying an input delay of 5ns means that after the rising
 edge of the clock, the data will be presented 5ns after the clock edge.
 Therefore, set_input_delay is arrival time of data after clock edge. 

    max: A maximum input delay is a setup check. It measures the maximum clock
         to output of the driving chip + board propagation delay. This means
         that the input data line will arrive after the specified max delay of the clock
         edge. If signal Dout of the design is the input to a register and the maximum
         input delay is applied as 4ns, then that means when the clock fires, the signal
         will not be valid at the input until 4ns or later.

    min: A minimum output delay is a hold check. If signal Dout inside your
         design is the input to a register, then the minimum input delay is the minimum
         that you must wait before the input is valid. Hold timing is the amount of time
         an input must be held before switching after the clock edge, so the minimum
         input delay should account for the hold time of the flop.
        

*set_output_delay*

 Timing paths often extend from a clock pin to a source register. These paths
 will go through traces and comb logic which have delays. If the source or
 destination register are outside of the macro you are designing, then the timing
 paths with those registers are not defined. You use the output delay and input
 delay constraints to solve this issue.

 NOTE: max input/output delay is used for setup timing analysis
       min input/output delay is used for hold timing analysis

 `set_output_delay` defines the delay of an external register relative to an
 external clock. It is literally the output delay that the output signal in your
 constraint will propagate before reaching the final destination. It is the
 range of delays of the clock after a data toggles. 

    max: A maximum output delay is a setup check. If signal Dout inside your
         design is applied a 3ns maximum output delay, you are saying that the receiving
         logic external to your macro will see that signal at maximum 3ns after the clock
         edge. If the macro and external macro both operate on a 10ns clock, then that
         means the receiving macro will fail if Dout has not left the flop by t=7ns (because it
         takes 3 seconds of delay to reach the end point). This means you are saying the
         output logic demands 3 seconds of setup time. Also defined as the setup
         time of receiving chip + board propagation.

         Example 1: `set_output_delay -clock CLKa -max 3 -period 20ns [get_ports clock_name]`
          Tclk = 10ns
          Tdiff = 10ns-10ns = 0ns (no clock difference)
          Tsu = 3ns (to external logic)
          Data must leave by Tclk-Tdiff-Tsu = 7ns

         Example 2: `set_output_delay -clock CLKa -max 8 -period 20ns [get_ports clock_name]`
          Tclk = 20ns
          Tsu = 8ns (output delay)
          Tu = 0ns (uncertainty)
          Tlogic = 9.5ns (arrival time)
          Tclk - Tsu - Tu = 12ns
          Data must leave by 12ns
          Slack = 12ns - Tlogic = 2.5ns

    min: A minimum output delay is a hold check. If signal Dout inside your design
         is applied a -1ns min output delay, then you are saying that when the
         clock rises, the external device must hold on to the data for 1ns before it can
         be updated. Also defined as minus hold time of receiving chip.

         Example 1: `set_output_delay -clock CLKa -min -1 -period 20ns [get_ports clock_name]`
          Tclk = 10ns
          Tdiff = 10ns-10ns = 0ns (no clock difference)
          Th = 1ns (to external logic)
          Data must leave by Tdiff-Th = -1

         Example 2: `set_output_delay -clock CLKa -min -3 -period 20ns [get_ports clock_name]`
          Tclk = 20ns
          Th = 3ns (to external logic)
          Tlogic = 5ns (arrival time)
          Tu = 0ns (uncertainty)
          Data must leave by -3ns
          0ns - (-3) + Tu = 3ns
          Slack = Tlogic - 3ns = 2ns
 
          
          
         

    Valid Window Example 1: This means that because of the max/min constraints, the output
                  register must have valid data between 7ns and 11ns (setup dicates 7ns and hold
                  dictates 11ns)
  
 

*set_max_delay*
TODO

*set_min_delay*
TODO

==============================================================================
BLOCKAGES                                                     *blockage-help*

==============================================================================
HALOS                                                         *halo-help*

==============================================================================
CLOCK GATE                                                    *clock_gate-help*
- look at Slack messages to put some knowledge from there in this section
