*chisel.txt*
==============================================================================
CHISEL3 Constructs                                               *chisel-help*

*chisel-zip*
The zip / zipWithIndex functions are used to create a list/sequence by "zipping"
the values up into a list/sequence of lists/sequences. You can see
that the output of iterating with a foreach loop over the zipped data 
shows that a, b, and c each are an element of each index. 

NOTE: zipWithIndex can be ran on a unique list/sequence to create a list 
of the elements with their index.

>
    object Demo extends App{
      val x : Seq[Int] = Seq(1, 3, 5, 7, 9)
      val y : Seq[Int] = Seq(2, 4, 6, 8, 10) 
      val z : Seq[Int] = Seq(10, 20, 30, 40, 50) 
      x.zip(y).zip(z).foreach {
        case ((a,b),c) => println(s"$a, $b, $c")
      }
    }
    Output: 
    [info] running Demo 
    1, 2, 10
    3, 4, 20
    5, 6, 30
    7, 8, 40
    9, 10, 50
    [success] Total time: 5 s, completed Aug 30, 2021 8:02:38 PM
<

*chisel-map*
The map function takes an input list and allows you to create
another list by performing transforms on the input list. In the example
below you take the list and create a new list with the input sequence
times 2. As a result, the output list has the same number of elements
but with the integer values doubled. 

>
    object Demo extends App{
      val x : Seq[Int] = Seq(1, 3, 5, 7, 9)
      val y = x.map( x => x*2)
      println(y)
    }
    Output: 
    [info] running Demo 
    List(2, 6, 10, 14, 18)
    [success] Total time: 7 s, completed Aug 30, 2021 8:14:12 PM
<


