*systemverilog.txt*
==============================================================================
VERILOG-AUTOS                                                     *systemverilog-autos*
// Local Variables:
// verilog-library-flags:("-F vmode.f")
// verilog-library-extensions:(".vm" ".v")
// verilog-auto-endcomments: nil
// verilog-auto-wire-comment: nil
// End:

==============================================================================
VERILOG-WEBSITE                                                   *verilog-website*
https://verilogguide.readthedocs.io/en/latest/index.html

==============================================================================
VERILOG-TASKS                                                     *systemverilog-tasks*

SystemVerilog tasks are procedural and often exist inside of modules. This gives you the ability
to update signals inside of that module with a routine task call.

module MyModule

task myTask;
...
endtask

endmodule

If you ever want to add a task outside of a module and still have the task values update
variables within the module definition, you need to pass the task values by reference and make
the tasks automatic. This will allow your module to see the task updates.

module MyModule
reg a;
initial begin
    myTask(a);
end
endmodule

task automatic myTask(ref x)
    begin
        x = 1;
        #1ns;
        x=0;
        end
endtask

==============================================================================
VERILOG-LOOPS                                                     *systemverilog-help*
    for (i=0; i<5; i++) begin            *systemverilog-for*
        a = 1;
    end

    while (^data[i] !== 1'bX) begin      *systemverilog-while*
        a = 1;
    end

    repeat(4) begin                      *systemverilog-repeat*
        a = 1;
    end

 task demo_task;                         *systemverilog-task*
      input string filename;    // Name of file containing data
      input integer nwords;     // Number of words in the memory
      reg [511:0]    readtmp;
      integer       file;
      integer       i, j;

      begin
        a = 1;
      end 
 endtask
==============================================================================
                                                                  *systemverilog-macro*
// Macros are used 


==============================================================================
                                                                  *systemverilog-plusargs*
// $value$plusargs allows you to grab + arguments from simulation run line
 string prog_file;
 if($value$plusargs("PROG=%s", prog_file)) //+PROG=s2m_prog.bin
   load_mem_512(prog_file, MEM_SIZE);
 else

==============================================================================
                                                                  *systemverilog-assertions*
// Website with explanations of all the assertions and uses
https://www.chipverify.com/systemverilog/systemverilog-assertions
https://www.doulos.com/knowhow/systemverilog/systemverilog-tutorials/systemverilog-assertions-tutorial/
https://verificationguide.com/systemverilog/systemverilog-functional-coverage/
https://testbench.in/
