*systemverilog.txt*
==============================================================================
VERILOG-AUTOS                                                     *systemverilog-autos*
// Local Variables:
// verilog-library-flags:("-F vmode.f")
// verilog-library-extensions:(".vm" ".v")
// verilog-auto-endcomments: nil
// verilog-auto-wire-comment: nil
// End:

==============================================================================
VERILOG-WEBSITE                                                   *verilog-website*
https://verilogguide.readthedocs.io/en/latest/index.html

==============================================================================
VERILOG-TASKS                                                     *systemverilog-tasks*

SystemVerilog tasks are procedural and often exist inside of modules. This gives you the ability
to update signals inside of that module with a routine task call.

module MyModule

task myTask;
...
endtask

endmodule

If you ever want to add a task outside of a module and still have the task values update
variables within the module definition, you need to pass the task values by reference and make
the tasks automatic. This will allow your module to see the task updates.

module MyModule
reg a;
initial begin
    myTask(a);
end
endmodule

task automatic myTask(ref x)
    begin
        x = 1;
        #1ns;
        x=0;
        end
endtask

==============================================================================
VERILOG-LOOPS                                                     *systemverilog-help*
    for (i=0; i<5; i++) begin            *systemverilog-for*
        a = 1;
    end

    while (^data[i] !== 1'bX) begin      *systemverilog-while*
        a = 1;
    end

    repeat(4) begin                      *systemverilog-repeat*
        a = 1;
    end

 task demo_task;                         *systemverilog-task*
      input string filename;    // Name of file containing data
      input integer nwords;     // Number of words in the memory
      reg [511:0]    readtmp;
      integer       file;
      integer       i, j;

      begin
        a = 1;
      end 
 endtask
==============================================================================
                                                                  *systemverilog-coverage*
Data-Oriented Coverage -> covergroups
// A covergroup is a group of coverpoints on a sampling clock or the .sample method
// For a covergroup, the bins are counters. 
// covergroup has to be constructed (could be in a package)
// covergroups can have arguments as values / refernces.
covergroup cg @(posedge clk);
    cpa: coverpoint addr
    { bins low = {[0: 'h0f], 19};
      bins mid[] = {16, 17, 18};
      bins high = {['h14:'hff] }; }
      addrxvalid : cross cpa, valid // addrxvalid is a cross between cpa and valid (need more research)
endgroup

Control-Oriente Coverage -> property
// For a property you can assert it for a failure or cover it for a counter to see if it happens.
propert req_gnt(cyc);
    @(posedge clk)
        req ##[cyc] gnt;
endproperty

Covreqgnt_3: cover property (req_gnt(3))
Covreqgnt_4: cover property (req_gnt(4))
Covreqgnt_5: cover property (req_gnt(5))

==============================================================================
                                                                  *systemverilog-assertions*
$assertoff(levels, tb.path.to.instance) -> Disable assertions
  level 0: All assertions in path and below are turned off
  level 1: Only assertions in module instance are turned off
  level 2: Assertions in module instance and one level below are turned off

$asserton() -> Re-enable assertions






==============================================================================
                                                                  *systemverilog-plusargs*
// $value$plusargs allows you to grab + arguments from simulation run line
 string prog_file;
 if($value$plusargs("PROG=%s", prog_file)) //+PROG=s2m_prog.bin
   load_mem_512(prog_file, MEM_SIZE);
 else

==============================================================================
                                                                  *systemverilog-assertions*
// Website with explanations of all the assertions and uses
https://www.chipverify.com/systemverilog/systemverilog-assertions
https://www.doulos.com/knowhow/systemverilog/systemverilog-tutorials/systemverilog-assertions-tutorial/
https://verificationguide.com/systemverilog/systemverilog-functional-coverage/
https://testbench.in/
