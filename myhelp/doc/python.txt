*python.txt*

==============================================================================
PYTHON-LOOPS                                                     *python-help*

==============================================================================
                                                                 *python-libraries*
https://github.com/vinta/awesome-python
https://schemdraw.readthedocs.io/en/latest/usage/start.html
==============================================================================
                                                                 *python-comprehensions*
List Comprehension: [expr for x in iterable]
Dictionary Comprehension: {key_expr: value_expr for x in iterable}
Set Comprehension: {expr for x in iterable}With Optional Conditions:

[expr for x in iterable if condition]
{key_expr: value_expr for x in iterable if condition}
{expr for x in iterable if condition}
==============================================================================
                                                                 *python-general*
*collections*
    Counter("aaabbc")
    namedtuple: Best used to access elements with dot notation pt.x, pt,y for pt = Point(x,y)
    OrderedDict: Same as normal dict in Python3.7>. Just preserves inserted order
    defaultdict: Same as dict but has defaults for entries without keys
    deque: Double ended queue.
        - extend, extendleft, append, appendleft, pop, popleft, rotate
    ChainMap: Encapsulates many dictionaries into one unit
        - maps, keys, values, new_child, reversed,
    UserDict: Used to inherit dictionary properties will customizing your own

*itertools*
    product: Cartesian product of 2 input iterables. [1,2] [3,4] = (1,3), (1,4), (2,3), (2,4)
    permutations: Returns all possible orderings as an output [1,2,3]=(1,2,3)(1,3,2),(2,1,3)...
    combinations: Returns all possible combinations of a list [1,2,3]=(1,2)(1,3),(2,3)
    accumulate: Returns a running accumulation of inputs or a func [1,2,10]=[1,3,13]
        - accumulate(list(), func=operator.mul) -> func= lets you specify the type
    groupby: Allows you to create groups that meet function requirements
        - groupby(list(), key=lambda x: x<3): returns keys that results from the groupby
    count, cycle, repeat:
        infinite iterator loops which can count, cycle a list(), or repeat something infinitely

*lambdas*
    Often used with sorted map, filter, and other common functional programming things.
    - map(func, iterable)
    - filter(func, iterable)
    - reduce(func, iterable) -> Can calculate the multiplication of the entire array

*exceptions*
    With raise, you can flag exceptions. 
    With assert, you can call to attention an error exists
    - ValueError
    - TypeError
    - ModuleNotFoundError
    - NameError
    - FileNotFoundError
        try:
        except Exception as e: -> Exception can be a Class or other Exception calls
            print(e)
*logging*
    - debug, info, warning, error, critical
    - logging.getLogger(__name__): Creates the logger name for the module scope, like in package

==============================================================================
                                                                 *python-dunder-methods*

*__contains__*
 - Used when you call "a in my_list"
 - Translates to my_list.__contains__(a)

__init__ 	        Initialise object 	docs
__new__ 	        Create object 	docs
__del__ 	        Destroy object 	docs
__repr__ 	        Compute “official” string representation / repr(obj) 	blog; docs
__str__ 	        Pretty print object / str(obj) / print(obj) 	blog; docs
__bytes__ 	        bytes(obj) 	docs
__format__ 	        Custom string formatting 	blog; docs
__lt__ 	            obj < ... 	docs
__le__ 	            obj <= ... 	docs
__eq__ 	            obj == ... 	docs
__ne__ 	            obj != ... 	docs
__gt__ 	            obj > ... 	docs
__ge__ 	            obj >= ... 	docs
__hash__ 	        hash(obj) / object as dictionary key 	docs
__bool__ 	        bool(obj) / define Truthy/Falsy value of object 	blog; docs
__getattr__ 	    Fallback for attribute access 	docs
__getattribute__ 	Implement attribute access: obj.name 	docs
__setattr__ 	    Set attribute values: obj.name = value 	docs
__delattr__ 	    Delete attribute: del obj.name 	docs
__dir__ 	        dir(obj) 	docs
__get__ 	        Attribute access in descriptor 	docs
__set__ 	        Set attribute in descriptor 	docs
__delete__ 	        Attribute deletion in descriptor 	docs
__init_subclass__ 	Initialise subclass 	docs
__set_name__ 	    Owner class assignment callback 	docs
__instancecheck__ 	isinstance(obj, ...) 	docs
__subclasscheck__ 	issubclass(obj, ...) 	docs
__class_getitem__ 	Emulate generic types 	docs
__call__ 	        Emulate callables / obj(*args, **kwargs) 	docs
__len__ 	        len(obj) 	docs
__length_hint__ 	Estimate length for optimisation purposes 	docs
__getitem__ 	    Access obj[key] 	blog; docs
__setitem__ 	    obj[key] = ... or obj[] 	blog; docs
__delitem__ 	    del obj[key] 	blog; docs
__missing__ 	    Handle missing keys in dict subclasses 	docs
__iter__ 	        iter(obj) / for ... in obj (iterating over) 	docs
__reversed__ 	    reverse(obj) 	docs
__contains__ 	    ... in obj (membership test) 	docs
__add__ 	        obj + ... 	blog; docs
__radd__ 	        ... + obj 	blog; docs
__iadd__ 	        obj += ... 	blog; docs
__sub__  	        obj - ... 	blog; docs
__mul__  	        obj * ... 	blog; docs
__matmul__  	    obj @ ... 	blog; docs
__truediv__  	    obj / ... 	blog; docs
__floordiv__  	    obj // ... 	blog; docs
__mod__  	        obj % ... 	blog; docs
__divmod__ 	        divmod(obj, ...) 	blog; docs
__pow__  	        obj ** ... 	blog; docs
__lshift__  	    obj << ... 	blog; docs
__rshift__  	    obj >> ... 	blog; docs
__and__             obj & ... 	blog; docs
__xor__  	        obj ^ ... 	blog; docs
__or__  	        obj | ... 	blog; docs
__neg__ 	        -obj (unary) 	blog; docs
__pos__ 	        +obj (unary) 	blog; docs
__abs__ 	        abs(obj) 	blog; docs
__invert__ 	        ~obj (unary) 	blog; docs
__complex__ 	    complex(obj) 	docs
__int__ 	        int(obj) 	docs
__float__ 	        float(obj) 	docs
__index__ 	        Losslessly convert to integer 	docs
__round__ 	        round(obj) 	docs
__trunc__ 	        math.trunc(obj) 	docs
__floor__ 	        math.floor(obj) 	docs
__ceil__ 	        math.ceil(obj) 	docs
__enter__ 	        with obj (enter context manager) 	docs
__exit__ 	        with obj (exit context manager) 	docs
__await__ 	        Implement awaitable objects 	docs
__aiter__ 	        aiter(obj) 	docs
__anext__ 	        anext(obj) 	docs
__aenter__ 	        async with obj (enter async context manager) 	docs
__aexit__ 	        async with obj (exit async context manager) 	docs




==============================================================================
                                                                 *python-todo*
1: map()
2: itertools
3: lambda function
4: Exception Handling
5: Decorators
6: Collections
    - namedtuple (similar to dataclass)
    - OrderedDict
    - Counter (counting hashable objects)
    - ChainMap (creating single view of multiple mappings)
7: Generators
    - Function which returns iterable objects 
    - return in a typical function returns 1 balue
    - yield (for generator function) pauses a function and sends back the result each time
8: Magic methods
    __add__
    __round__
    __floor__
9: Threading
10: Regular expressions
    - import re
11: unpacking
    *x, = map(x,y)
    a, b, *c = [1,2,3,4,5]


