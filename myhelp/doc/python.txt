*python.txt*

==============================================================================
PYTHON-LOOPS                                                     *python-help*

==============================================================================
                                                                 *python-libraries*
https://github.com/vinta/awesome-python
https://schemdraw.readthedocs.io/en/latest/usage/start.html
==============================================================================
                                                                 *python-comprehensions*
List Comprehension: [expr for x in iterable]
Dictionary Comprehension: {key_expr: value_expr for x in iterable}
Set Comprehension: {expr for x in iterable}With Optional Conditions:

[expr for x in iterable if condition]
{key_expr: value_expr for x in iterable if condition}
{expr for x in iterable if condition}
==============================================================================
                                                                 *python-general*
*collections*
    Counter("aaabbc")
    namedtuple: Best used to access elements with dot notation pt.x, pt,y for pt = Point(x,y)
    OrderedDict: Same as normal dict in Python3.7>. Just preserves inserted order
    defaultdict: Same as dict but has defaults for entries without keys
    deque: Double ended queue.
        - extend, extendleft, append, appendleft, pop, popleft, rotate
    ChainMap: Encapsulates many dictionaries into one unit
        - maps, keys, values, new_child, reversed,
    UserDict: Used to inherit dictionary properties will customizing your own

*itertools*
    product: Cartesian product of 2 input iterables. [1,2] [3,4] = (1,3), (1,4), (2,3), (2,4)
    permutations: Returns all possible orderings as an output [1,2,3]=(1,2,3)(1,3,2),(2,1,3)...
    combinations: Returns all possible combinations of a list [1,2,3]=(1,2)(1,3),(2,3)
    accumulate: Returns a running accumulation of inputs or a func [1,2,10]=[1,3,13]
        - accumulate(list(), func=operator.mul) -> func= lets you specify the type
    groupby: Allows you to create groups that meet function requirements
        - groupby(list(), key=lambda x: x<3): returns keys that results from the groupby
    count, cycle, repeat:
        infinite iterator loops which can count, cycle a list(), or repeat something infinitely

*lambdas*
    Often used with sorted map, filter, and other common functional programming things.
    - map(func, iterable)
    - filter(func, iterable)
    - reduce(func, iterable) -> Can calculate the multiplication of the entire array

*exceptions*
    With raise, you can flag exceptions. 
    With assert, you can call to attention an error exists
    - ValueError
    - TypeError
    - ModuleNotFoundError
    - NameError
    - FileNotFoundError
        try:
        except Exception as e: -> Exception can be a Class or other Exception calls
            print(e)
*logging*
    - debug, info, warning, error, critical
    - logging.getLogger(__name__): Creates the logger name for the module scope, like in package




==============================================================================
                                                                 *python-todo*
1: map()
2: itertools
3: lambda function
4: Exception Handling
5: Decorators
6: Collections
    - namedtuple (similar to dataclass)
    - OrderedDict
    - Counter (counting hashable objects)
    - ChainMap (creating single view of multiple mappings)
7: Generators
    - Function which returns iterable objects 
    - return in a typical function returns 1 balue
    - yield (for generator function) pauses a function and sends back the result each time
8: Magic methods
    __add__
    __round__
    __floor__
9: Threading
10: Regular expressions
    - import re
11: unpacking
    *x, = map(x,y)
    a, b, *c = [1,2,3,4,5]

